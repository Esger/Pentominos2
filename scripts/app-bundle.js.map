{"version":3,"sources":["app.js","environment.js","main.js","services/board-service.js","services/data-service.js","services/drag-service.js","services/keystroke-service.js","services/pentomino-service.js","services/permutation-service.js","services/setting-service.js","services/solution-service.js","services/solver-worker.js","resources/index.js","resources/elements/board.js","resources/elements/controls.js","resources/elements/header.js","resources/elements/menu.js","resources/elements/pentominos.js","resources/elements/solving.js","resources/value-converters/part-pos-value-converter.js","resources/value-converters/pento-face-value-converter.js","resources/value-converters/pento-pos-value-converter.js","resources/value-converters/thousands-value-converter.js"],"names":["App","dragService","keystrokeService","ds","ks","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","BoardService","partSize","boardType","boardTypes","w","h","surface","solved","newSolution","setSolved","unsetSolved","setNewSolution","unsetNewSolution","setBoardType","shape","getWidth","getHeight","boardsCount","count","k","hasOwnProperty","onBoard","x","y","touchesBoard","pentomino","isTouching","faces","face","length","i","part","position","partIsOnBoard","DataService","boardService","bs","client","solutions","getSolutions","timeOutHandle","undefined","deleteSolutions","saveSolution","getPentominos","fileName","get","data","response","JSON","parse","getColors","getStartPosition","localStorage","getItem","type","sortSolutions","Array","isArray","sort","a","b","solutionString","push","saveToLocalStorage","setTimeout","setItem","stringify","clearTimeout","DragService","bindingSignaler","eventAggregator","settingService","pentominoService","permutationService","bnds","ea","ss","ps","prms","dragStartPos","dragEndPos","lastZindex","getClientPos","event","clientX","touches","clientY","scale","startDrag","partIndex","container","clientPos","setActivePentomino","registerPiece","target","offsetParent","style","zIndex","startX","offsetLeft","startY","offsetTop","doDrag","getActivePentomino","left","top","stopDrag","alignToGrid","isDragged","activePart","oldActivePartPosition","getActivePartPosition","flipRotate","newActivePartPosition","adjustPosition","publish","isSolved","releasePentomino","resetActivePentomino","newX","Math","round","newY","setActivePentominoPosition","abs","KeystrokeService","acceptMoves","myKeypressCallback","keypressInput","bind","setSubscribers","keysOff","keysOn","document","addEventListener","subscribe","e","keycode","key","PentominoService","dataService","solutionService","sls","pentominos","offBoardPentominos","fields","activePentomino","oBlock","boardIsFull","getFields","index","signalViewUpdate","signal","sortPentominos","pentos","onOff","onBoardParts","partsCount","registerPieces","setBoardFields","adjustDimensions","content","setPentominos","getPentominoData","getPentominoColors","color","initialDimensions","dimensions","slice","reverse","boardHas60Squares","toggleOblock","pop","currentSolution","active","filter","pento","PermutationService","rotable","partTranslations","flipBoardYAxis","rotateSquareBoard","origin","shiftPieces","dx","dy","shiftPiecesToTop","topMostY","min","map","rotateBoard","mixBoard","clientWidth","floor","querySelectorAll","clientHeight","maxX","maxY","offsetX","random","xPos","yPos","SettingService","opaqueBlocks","getScale","screenWidth","boardWidth","SolutionService","possibleSolutions","setPossibleSolutions","onBoardPentominos","rotations","flipRotatedOnboardStrings","flip","rotation","onBoardStrings","pentomino2string","containsAll","solution","results","result","onBoardStringsArr","forEach","includes","str","some","getPossibleSolutionsCount","solutionResult","isNewSolution","isNaN","findSolution","indexOf","foundSolStr","solution2String","solNr","parts","name","join","boardHeight","rotatedBoard","startPositionsXblock","xPentomino","getPentomino","startPosXBlock","positionsTried","proceed","autoSolve","allOffBoard","setOnboard","xPosition","getXBlockPosition","movePentomino","sendFeedBack","findNextFit","emptyBoard","copyBoardFields","flds","discard","misFits","findFirstEmptyPosition","firstAxis","max","secondAxis","j","findFirstPartRight","offsetRight","findFirstPartDown","offsetDown","offBoards","firstEmptyPosition","holeFitsXPieces","nextOnboard","isFitting","concat","findPentominoByName","set","find","xy","holeSize","oPentoOnboard","oPentominoOnboard","label","board","countDown","countLeft","countRight","countUp","holeFits","sum","compensation","initVariables","onBoards","noneStickingOut","logBoard","blockCount","partCount","console","clear","table","shiftIt","newPosition","setFace","yShift","xShift","setPosition","shift","message","workerData","positions","postMessage","close","splice","onmessage","BoardCustomElement","getBoardSizeCSS","css","width","height","getBoardClasses","classes","solvedClass","ControlsCustomElement","disabledButtons","getIndicatorClass","showSolution","splitString","substr","split","props","parseInt","disableNextButton","current","disablePreviousButton","showFirstSolution","showLastSolution","solutionCount","showPreviousSolution","showNextSolution","direction","newDirection","directions","possibleSolutionsCount","possible","text","HeaderCustomElement","title","moves","getHeaderSizeCss","resetMoves","MenuCustomElement","Object","keys","settings","menuVisible","menuDisabled","submenuBoardsVisible","showTheMenu","hideTheMenu","showThisBoard","threshold","toggleSubmenuBoards","getBoardDimensions","getActiveBoardClass","screenIsLargeEnough","clw","clh","setStartPosition","workersSupported","window","Worker","showSolvingPanel","PentominosCustomElement","getPentominoClasses","getPartClasses","flipH","flipV","getPentominoCSS","backgroundColor","getPartCSS","attached","SolvingCustomElement","solvingPanelVisible","slvrWrkr","canStop","stop","solutionsBuffer","backupPentominos","alert","handleSolutions","bufferSolution","delete","stageBuffer","self","solutionsInQueue","requestAnimationFrame","terminate","PartPosValueConverter","toView","PentoFaceValueConverter","array","PentoPosValueConverter","ThousandsValueConverter","number","toLocaleString"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { DragService } from './services/drag-service';\nimport { KeystrokeService } from './services/keystroke-service';\n\n@inject(DragService, KeystrokeService)\n\nexport class App {\n    constructor(dragService, keystrokeService) {\n        this.ds = dragService;\n        this.ks = keystrokeService;\n    }\n}","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\n\nexport class BoardService {\n\n    constructor() {\n        this.partSize = 40;\n        this.boardType = 'square';\n        this.boardTypes = {\n            'square': {\n                w: 8,\n                h: 8,\n                surface: 64\n            },\n            'rectangle': {\n                w: 6,\n                h: 10,\n                surface: 60\n            },\n            'dozen': {\n                w: 12,\n                h: 5,\n                surface: 60\n            },\n            'beam': {\n                w: 15,\n                h: 4,\n                surface: 60\n            },\n            'stick': {\n                w: 16,\n                h: 4,\n                surface: 64\n            },\n            'twig': {\n                w: 20,\n                h: 3,\n                surface: 60\n            }\n        };\n        this.solved = false;\n        this.newSolution = false;\n    }\n\n    setSolved() {\n        this.solved = true;\n    }\n\n    unsetSolved() {\n        this.solved = false;\n    }\n\n    setNewSolution() {\n        this.newSolution = true;\n    }\n\n    unsetNewSolution() {\n        this.newSolution = false;\n    }\n\n    setBoardType(shape) {\n        this.boardType = shape;\n    }\n\n    getWidth() {\n        return this.boardTypes[this.boardType].w;\n    }\n\n    getHeight() {\n        return this.boardTypes[this.boardType].h;\n    }\n\n    boardsCount() {\n        let count = 0;\n        for (let k in this.boardTypes) if (this.boardTypes.hasOwnProperty(k)) count++;\n        return count;\n    }\n\n    onBoard(x, y) {\n        return (x >= 0) && (x < this.getWidth()) && (y >= 0) && (y < this.getHeight());\n    }\n\n    touchesBoard(pentomino) {\n        let isTouching = false;\n        const count = pentomino.faces[pentomino.face].length;\n        for (let i = 0; i < count; i++) {\n            const part = pentomino.faces[pentomino.face][i];\n            const x = pentomino.position.x + part[0];\n            const y = pentomino.position.y + part[1];\n            const partIsOnBoard = this.onBoard(x, y);\n            if (partIsOnBoard) {\n                isTouching = true;\n                break;\n            }\n        }\n        return isTouching;\n    }\n\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { HttpClient } from 'aurelia-http-client';\nimport { BoardService } from './board-service';\n\n@inject(BoardService)\n\nexport class DataService {\n\n    constructor(boardService) {\n        this.bs = boardService;\n        this.client = new HttpClient();\n        this.solutions = this.getSolutions();\n        this.timeOutHandle = undefined;\n    }\n\n    deleteSolutions() {\n        this.solutions[this.bs.boardType] = [];\n        this.saveSolution();\n    }\n\n    getPentominos() {\n        let fileName = './data/pentominos.json';\n        return this.client.get(fileName)\n            .then((data) => {\n                let response = JSON.parse(data.response);\n                return response;\n            });\n    }\n\n    getColors() {\n        let fileName = './data/colors.json';\n        return this.client.get(fileName)\n            .then(data => {\n                let response = JSON.parse(data.response);\n                return response;\n            });\n    }\n\n    getStartPosition() {\n        let fileName = './data/start-' + this.bs.boardType + '.json';\n        return this.client.get(fileName)\n            .then(data => {\n                let response = JSON.parse(data.response);\n                return response;\n            });\n    }\n\n    getSolutions() {\n        let solutions;\n        if (localStorage.getItem(\"pentominos2\")) {\n            solutions = JSON.parse(localStorage.getItem(\"pentominos2\"));\n        } else {\n            solutions = {};\n            let boardTypes = this.bs.boardTypes;\n            for (let type in boardTypes) {\n                if (boardTypes.hasOwnProperty(type)) {\n                    solutions[type] = [];\n                }\n            }\n        }\n        return solutions;\n    }\n\n    sortSolutions(solutions) {\n        if (Array.isArray(solutions)) {\n            return solutions.sort((a, b) => {\n                return a < b;\n            });\n        } else {\n            return solutions;\n        }\n    }\n\n    saveSolution(solutionString) {\n        if (solutionString) {\n            this.solutions[this.bs.boardType].push(solutionString);\n        } else {\n            this.saveToLocalStorage();\n        }\n        if (!this.timeOutHandle) {\n            this.timeOutHandle = setTimeout(() => {\n                this.saveToLocalStorage();\n            }, 5000);\n        }\n    }\n\n    saveToLocalStorage() {\n        this.solutions[this.bs.boardType] = this.sortSolutions(this.solutions[this.bs.boardType]);\n        localStorage.setItem(\"pentominos2\", JSON.stringify(this.solutions));\n        clearTimeout(this.timeOutHandle);\n    }\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { BindingSignaler } from 'aurelia-templating-resources';\nimport { SettingService } from './setting-service';\nimport { PentominoService } from './pentomino-service';\nimport { PermutationService } from './permutation-service';\n\n@inject(BindingSignaler, EventAggregator, SettingService, PentominoService, PermutationService)\n\nexport class DragService {\n\n    constructor(bindingSignaler, eventAggregator, settingService, pentominoService, permutationService) {\n        this.bnds = bindingSignaler;\n        this.ea = eventAggregator;\n        this.ss = settingService;\n        this.ps = pentominoService;\n        this.prms = permutationService;\n        this.dragStartPos = {};\n        this.dragEndPos = {};\n        this.lastZindex = 1;\n    }\n\n    getClientPos(event) {\n        let clientX = (event.touches) ? event.touches[0].clientX : event.clientX;\n        let clientY = (event.touches) ? event.touches[0].clientY : event.clientY;\n        return {\n            x: clientX / this.ss.scale,\n            y: clientY / this.ss.scale\n        };\n    }\n\n    startDrag(pentomino, partIndex, event) {\n        if (this.container == null) {\n            let clientPos = this.getClientPos(event);\n            this.ps.setActivePentomino(pentomino, partIndex);\n            this.ps.registerPiece(pentomino, -1);\n            this.container = event.target.offsetParent.offsetParent;\n            this.container.style.zIndex = this.lastZindex++;\n            this.startX = clientPos.x - this.container.offsetLeft;\n            this.startY = clientPos.y - this.container.offsetTop;\n            this.x = clientPos.x - this.startX;\n            this.y = clientPos.y - this.startY;\n            this.dragStartPos.x = this.x;\n            this.dragStartPos.y = this.y;\n        }\n        return false;\n    }\n\n    doDrag(event) {\n        let clientPos = this.getClientPos(event);\n        if (this.ps.getActivePentomino()) {\n            this.x = clientPos.x - this.startX;\n            this.y = clientPos.y - this.startY;\n            this.container.style.left = this.x + 'px';\n            this.container.style.top = this.y + 'px';\n        }\n    }\n\n    stopDrag(event) {\n        this.dragEndPos.x = this.x;\n        this.dragEndPos.y = this.y;\n        let pentomino = this.ps.getActivePentomino();\n        if (pentomino) {\n            this.alignToGrid();\n            if (!this.isDragged()) {\n                // todo no if here; compensate in prms\n                if (((pentomino.type == 4) && (pentomino.activePart < 1)) ||\n                    ((pentomino.type == 3) && (pentomino.activePart < 3)) ||\n                    ((pentomino.type == 2) && (pentomino.activePart < 3)) ||\n                    (pentomino.type < 3)) {\n                    let oldActivePartPosition = this.ps.getActivePartPosition();\n                    this.prms.flipRotate(pentomino);\n                    let newActivePartPosition = this.ps.getActivePartPosition();\n                    this.prms.adjustPosition(pentomino, oldActivePartPosition, newActivePartPosition);\n                    this.ea.publish('move', 1);\n                }\n            } else {\n                this.ea.publish('move', 1);\n            }\n            this.ps.registerPiece(pentomino, 1);\n            this.ps.isSolved();\n        }\n        this.releasePentomino();\n    }\n\n    releasePentomino() {\n        if (this.container) {\n            this.container = null;\n        }\n        this.ps.resetActivePentomino();\n    }\n\n    alignToGrid() {\n        let newX = Math.round(this.x / this.ss.partSize);\n        let newY = Math.round(this.y / this.ss.partSize);\n        this.ps.setActivePentominoPosition(newX, newY);\n        this.container.style.left = newX * this.ss.partSize + 'px';\n        this.container.style.top = newY * this.ss.partSize + 'px';\n    }\n\n    isDragged() {\n        return ((Math.abs(this.dragEndPos.x - this.dragStartPos.x) > 19) || (Math.abs(this.dragEndPos.y - this.dragStartPos.y) > 19));\n    }\n}\n","import {\n    inject\n} from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class KeystrokeService {\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.acceptMoves = true;\n        this.myKeypressCallback = this.keypressInput.bind(this);\n        this.setSubscribers();\n    }\n\n    keysOff() {\n        this.acceptMoves = false;\n    }\n\n    keysOn() {\n        this.acceptMoves = true;\n    }\n\n    setSubscribers() {\n        document.addEventListener('keydown', this.myKeypressCallback, false);\n        this.ea.subscribe('keysOff', response => {\n            this.keysOff();\n        });\n        this.ea.subscribe('keysOn', response => {\n            this.keysOn();\n        });\n    }\n\n    // This function is called by the aliased method\n    keypressInput(e) {\n        let keycode = event.key; // also for cross-browser compatible\n        (this.acceptMoves) && this.ea.publish('keyPressed', keycode);\n    }\n}","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { BindingSignaler } from 'aurelia-templating-resources';\nimport { DataService } from './data-service';\nimport { BoardService } from './board-service';\nimport { SolutionService } from './solution-service';\n\n@inject(BindingSignaler, DataService, BoardService, SolutionService)\nexport class PentominoService {\n\n    constructor(bindingSignaler, dataService, boardService, solutionService) {\n\n        this.bnds = bindingSignaler;\n        this.ds = dataService;\n        this.bs = boardService;\n        this.sls = solutionService;\n\n        this.pentominos = [];\n        this.offBoardPentominos = [];\n        this.fields = [];\n        this.activePentomino = null;\n        this.oBlock = null;\n        this.start();\n    }\n\n    get offBoards() {\n        let pentos = this.pentominos.filter((pento) => {\n            return pento.onBoard === false;\n        });\n        return pentos;\n    }\n\n    get onBoards() {\n        let pentos = this.pentominos.filter((pento) => {\n            return pento.onBoard === true;\n        });\n        return pentos;\n    }\n\n    isSolved() {\n        let boardIsFull = this.boardIsFull();\n        if (boardIsFull) {\n            this.bs.setSolved();\n            this.sls.saveSolution(this.pentominos);\n        } else {\n            this.bs.unsetNewSolution();\n            this.bs.unsetSolved();\n        }\n    }\n\n    boardIsFull() {\n        let h = this.bs.getHeight();\n        let w = this.bs.getWidth();\n        for (let y = 0; y < h; y++) {\n            for (let x = 0; x < w; x++) {\n                if (this.fields[y][x] !== 1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    getFields() {\n        return this.fields;\n    }\n\n    getActivePentomino() {\n        return this.activePentomino;\n    }\n\n    setActivePentomino(pentomino, index) {\n        this.activePentomino = pentomino;\n        this.activePentomino.activePart = index;\n    }\n\n    resetActivePentomino() {\n        if (this.activePentomino) {\n            this.activePentomino.activePart = null;\n        }\n        this.activePentomino = null;\n    }\n\n    setActivePentominoPosition(newX, newY) {\n        this.activePentomino.position.x = newX;\n        this.activePentomino.position.y = newY;\n    }\n\n    getActivePartPosition() {\n        let pentomino = this.activePentomino;\n        return [\n            pentomino.position.x + pentomino.faces[pentomino.face][pentomino.activePart][0],\n            pentomino.position.y + pentomino.faces[pentomino.face][pentomino.activePart][1]\n        ];\n    }\n\n    signalViewUpdate() {\n        this.bnds.signal('position-signal');\n    }\n\n    sortPentominos(pentos) {\n        pentos.sort((a, b) => {\n            return a.index - b.index;\n        });\n        return pentos;\n    }\n\n    registerPiece(pentomino, onOff) {\n        if (pentomino) {\n            let onBoardParts = 0;\n            let partsCount = pentomino.faces[pentomino.face].length;\n            for (let i = 0; i < partsCount; i++) {\n                let x = pentomino.faces[pentomino.face][i][0] + pentomino.position.x;\n                let y = pentomino.faces[pentomino.face][i][1] + pentomino.position.y;\n                if (this.bs.onBoard(x, y)) {\n                    this.fields[y][x] += onOff;\n                    onBoardParts += 1;\n                }\n                pentomino.onBoard = (onBoardParts == partsCount);\n            }\n        }\n    }\n\n    registerPieces() {\n        this.fields = this.setBoardFields(0);\n        for (var i = 0; i < this.pentominos.length; i++) {\n            let pentomino = this.pentominos[i];\n            this.registerPiece(pentomino, 1);\n            this.adjustDimensions(pentomino);\n        }\n        this.signalViewUpdate();\n    }\n\n    setBoardFields(content) {\n        let w = this.bs.getWidth();\n        let h = this.bs.getHeight();\n        let fields = [];\n        for (let y = 0; y < h; y++) {\n            fields.push([]);\n            for (let x = 0; x < w; x++) {\n                fields[y].push(content);\n            }\n        }\n        return fields;\n    }\n\n    setPentominos(pentos) {\n        this.pentominos = pentos;\n    }\n\n    start() {\n        this.getPentominoData().then((response) => {\n            this.pentominos = response;\n            this.getPentominoColors().then(() => {\n                this.getStartPosition().then(() => {\n                    this.registerPieces();\n                    this.bs.unsetSolved();\n                });\n            });\n        });\n    }\n\n    // Get the pentomino blocks\n    getPentominoData() {\n        return this.ds.getPentominos().then((response) => {\n            return response;\n        });\n    }\n\n    // Get the colors for the pentominos\n    getPentominoColors() {\n        return this.ds.getColors().then((response) => {\n            for (let i = 0; i < this.pentominos.length; i++) {\n                this.pentominos[i].color = response[i].color;\n            }\n        });\n    }\n\n    adjustDimensions(pentomino) {\n        if (pentomino && pentomino.initialDimensions) {\n            pentomino.dimensions = pentomino.initialDimensions.slice();\n        }\n        if (pentomino && pentomino.face % 2 == 1) {\n            pentomino.dimensions.reverse();\n        }\n    }\n\n    boardHas60Squares() {\n        let shape = this.bs.boardType;\n        return !(shape === 'square' || shape === 'stick');\n    }\n\n    // Remove or add the Oblock as needed for current boardType\n    toggleOblock() {\n        if (this.boardHas60Squares()) {\n            if (!this.oBlock) {\n                this.oBlock = this.pentominos.pop();\n            }\n        } else {\n            if (this.oBlock) {\n                this.pentominos.push(this.oBlock);\n                this.oBlock = null;\n            }\n        }\n    }\n\n    // Get the starting position for the given board type\n    getStartPosition() {\n        return this.ds.getStartPosition().then((response) => {\n            this.sls.currentSolution = -1;\n            let count = response.length;\n            this.toggleOblock();\n            for (let i = 0; i < count; i++) {\n                let pentomino = this.pentominos[i];\n                pentomino.face = response[i].face;\n                pentomino.position = response[i].position;\n                pentomino.active = false;\n                pentomino.index = i;\n                if (!pentomino.initialDimensions) {\n                    pentomino.initialDimensions = pentomino.dimensions.slice();\n                } else {\n                    pentomino.dimensions = pentomino.initialDimensions.slice();\n                }\n                if (pentomino.face % 2 == 1) {\n                    pentomino.dimensions.reverse();\n                }\n            }\n            this.registerPieces();\n        });\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { BoardService } from './board-service';\n\n@inject(BoardService)\n\nexport class PermutationService {\n\n    constructor(boardService) {\n        this.bs = boardService;\n        this.rotable = [\n            [ // rotate clockwise\n                [1, 2, 3, 0, 5, 6, 7, 4], // blyfn\n                [1, 2, 3, 0], // vw\n                [1, 2, 3, 0], // tu\n                [1, 0, 3, 2], // z\n                [1, 0], // i\n                [0] // xo not necessary\n            ],\n            [ // flip around yAxis\n                [4, 7, 6, 5, 0, 3, 2, 1], // blyfn\n                [3, 2, 1, 0], // vw\n                [0, 3, 2, 1], // tu\n                [2, 3, 0, 1], // z\n                [0, 1], // i not necessary\n                [0] // xo not necessary\n            ],\n            [ // flip around xAxis\n                [6, 5, 4, 7, 2, 1, 0, 3], // blyfn\n                [1, 0, 3, 2], // vw\n                [2, 1, 0, 3], // tu\n                [2, 3, 0, 1], // z\n                [0, 1], // i not necessary\n                [0] // xo not necessary\n            ],\n            [ // rotate counter clockwise\n                [3, 0, 1, 2, 7, 4, 5, 6], // blyfn\n                [3, 0, 1, 2], // vw\n                [3, 0, 1, 2], // tu\n                [0, 1, 2, 3], // z\n                [1, 0], // i\n                [0] // xo not necessary\n            ]\n        ];\n    }\n\n    // Returns the new face index for a given face, action and blocktype\n    flipRotate(pentomino, part) {\n        let partTranslations = [\n            [0, 1, 2, 3, 3],\n            [0, 1, 2, 3, 3],\n            [0, 1, 2, 3, 3],\n            [0, 1, 2, 3, 3],\n            [0, 0, 0, 0, 0]\n        ];\n        if (part == undefined) {\n            part = partTranslations[pentomino.type][pentomino.activePart];\n        }\n        pentomino.face = this.rotable[part][pentomino.type][pentomino.face];\n        // switch the dimensions if pentomino is rotated;\n        if (part === 0) {\n            pentomino.dimensions.reverse();\n        }\n    }\n\n    flipBoardYAxis(pentominos) {\n        let pentomino;\n        for (let i = 0; i < pentominos.length; i++) {\n            pentomino = pentominos[i];\n            this.flipRotate(pentomino, 1);\n            pentomino.position.x = this.bs.getWidth() - pentomino.position.x - pentomino.dimensions[0];\n        }\n    }\n\n    // 90° clockwise rotation\n    rotateSquareBoard(pentominos) {\n        let pentomino;\n        let origin = {};\n        for (let i = 0; i < pentominos.length; i++) {\n            pentomino = pentominos[i];\n            // bottom left of current rectangle occupied by pentomino\n            origin.x = pentomino.position.x;\n            origin.y = pentomino.position.y + pentomino.dimensions[1];\n            // rotated position on board\n            pentomino.position.x = this.bs.getWidth() - origin.y;\n            pentomino.position.y = origin.x;\n            // rotated pentomino\n            this.flipRotate(pentomino, 0);\n        }\n    }\n\n    shiftPieces(pentominos, dx, dy) {\n        for (let i = 0; i < pentominos.length; i++) {\n            pentominos[i].position.x += dx;\n            pentominos[i].position.y += dy;\n        }\n    }\n\n    shiftPiecesToTop(pentominos) {\n        let topMostY = Math.min(...pentominos.map(pentomino => {\n            return pentomino.position.y;\n        }));\n        this.shiftPieces(pentominos, 0, -topMostY);\n    }\n\n    // Thanks Ben Nierop, for the idea\n    adjustPosition(pentomino, oldActivePartPosition, newActivePartPosition) {\n        let dx = oldActivePartPosition[0] - newActivePartPosition[0];\n        let dy = oldActivePartPosition[1] - newActivePartPosition[1];\n        this.shiftPieces([pentomino], dx, dy);\n    }\n\n    rotateBoard(pentominos) {\n        if (this.bs.boardType == 'square') {\n            this.rotateSquareBoard(pentominos);\n        } else {\n            // rotate twice and shift pentominos to top\n            for (let i = 0; i < 2; i++) this.rotateSquareBoard(pentominos);\n            this.shiftPiecesToTop(pentominos);\n        }\n    }\n\n    mixBoard(pentominos) {\n        let clientWidth = Math.floor(document.querySelectorAll('.dragArea')[0].clientWidth / this.bs.partSize);\n        let clientHeight = Math.floor(document.querySelectorAll('.dragArea')[0].clientHeight / this.bs.partSize);\n        let maxX = clientWidth - 4;\n        let maxY = clientHeight - 4;\n        // offset values in positions\n        let offsetX = Math.floor((clientWidth - this.bs.getWidth()) / 2);\n\n        const count = pentominos.length;\n        for (let i = 0; i < count; i++) {\n            const pentomino = pentominos[i];\n            const face = Math.floor(Math.random() * pentomino.faces.length);\n            pentomino.face = face;\n            // find random off board position\n            do {\n                let xPos = Math.floor(Math.random() * maxX);\n                xPos -= offsetX;\n                let yPos = Math.floor(Math.random() * maxY);\n\n                pentomino.position.x = xPos;\n                pentomino.position.y = yPos;\n            } while (this.bs.touchesBoard(pentomino));\n            pentomino.onBoard = false;\n        }\n    }\n\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\n\nexport class SettingService {\n\n    constructor() {\n        this.opaqueBlocks = true;\n        this.scale = 1;\n        this.partSize = 40;\n        this.opaqueBlocks = false;\n    }\n\n    getScale() {\n        let screenWidth = document.querySelectorAll(\"html\")[0].clientWidth;\n        let boardWidth = document.querySelectorAll(\".board\")[0].clientWidth;\n        let scale = Math.min(screenWidth / boardWidth, 1);\n        scale = Math.floor(scale * 10) / 10;\n        this.scale = scale;\n        return {\n            'transformOrigin': 'top',\n            '-webkit-transform': 'scale(' + scale + ', ' + scale + ')',\n            '-ms-transform': 'scale(' + scale + ', ' + scale + ')',\n            'transform': 'scale(' + scale + ', ' + scale + ')'\n        };\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { BoardService } from './board-service';\nimport { PermutationService } from './permutation-service';\nimport { DataService } from './data-service';\nimport { SettingService } from './setting-service';\n\n@inject(BoardService, PermutationService, DataService, SettingService)\n\nexport class SolutionService {\n\n    constructor(boardService, permutationService, dataService, settingService) {\n        this.bs = boardService;\n        this.ds = dataService;\n        this.ss = settingService;\n        this.prms = permutationService;\n        this.possibleSolutions = [];\n        this.currentSolution = -1;\n        this.getSolutions();\n    }\n\n    getSolutions() {\n        this.solutions = this.ds.getSolutions();\n    }\n\n    setPossibleSolutions(onBoardPentominos) {\n        const rotations = (this.bs.boardType == 'square') ? 4 : 2;\n        let solutions = this.solutions[this.bs.boardType];\n        let flipRotatedOnboardStrings = [];\n\n        // Mirror\n        for (let flip = 0; flip < 2; flip++) {\n            // Rotate\n            for (let rotation = 0; rotation < rotations; rotation++) {\n                let onBoardStrings = onBoardPentominos.map(pentomino => {\n                    return this.pentomino2string(pentomino);\n                });\n                flipRotatedOnboardStrings.push(onBoardStrings);\n                this.prms.rotateBoard(onBoardPentominos);\n            }\n            this.prms.flipBoardYAxis(onBoardPentominos);\n        }\n\n        let containsAll = (solution) => {\n            let results = flipRotatedOnboardStrings.map(onBoardStringsArr => {\n                let result = true;\n                onBoardStringsArr.forEach(str => {\n                    result = solution.includes(str) && result;\n                });\n                return result;\n            });\n            return results.some(result => {\n                return result;\n            });\n        };\n        this.possibleSolutions = solutions.filter(solution => {\n            return containsAll(solution);\n        });\n    }\n\n    getPossibleSolutionsCount() {\n        return this.possibleSolutions.length;\n    }\n\n    deleteSolutions() {\n        this.ds.deleteSolutions();\n        this.getSolutions();\n    }\n\n    saveSolution(pentominos) {\n        if (pentominos) {\n            let solutionResult = this.isNewSolution(pentominos);\n            // A number indicates an existing solution\n            // A string indicate a new solution\n            if (!isNaN(solutionResult)) {\n                // show this solution\n                this.currentSolution = solutionResult;\n                this.bs.unsetNewSolution();\n            } else {\n                this.solutions[this.bs.boardType].push(solutionResult);\n                this.currentSolution = this.solutions[this.bs.boardType].length - 1;\n                this.bs.setNewSolution();\n                this.ds.saveSolution(solutionResult);\n            }\n        } else {\n            this.ds.saveSolution();\n        }\n    }\n\n    findSolution(solutionString) {\n        return this.solutions[this.bs.boardType].indexOf(solutionString);\n    }\n\n    isNewSolution(pentominos) {\n        const rotations = (this.bs.boardType == 'square') ? 4 : 2;\n        const foundSolStr = this.solution2String(pentominos);\n        // use .split() to create arrays\n        // Mirror\n        for (let flip = 0; flip < 2; flip++) {\n            // Rotate\n            for (let rotation = 0; rotation < rotations; rotation++) {\n                // Existing solutions\n                let solutionString = this.solution2String(pentominos);\n                let solNr = this.findSolution(solutionString);\n                if (solNr >= 0) {\n                    return solNr;\n                }\n                this.prms.rotateBoard(pentominos);\n            }\n            this.prms.flipBoardYAxis(pentominos);\n        }\n        return foundSolStr;\n    }\n\n    solution2String(pentominos) {\n        let solutionString = \"\";\n        const count = pentominos.length;\n        let i = 0;\n        for (; i < count; i++) {\n            let pentomino = pentominos[i];\n            solutionString += this.pentomino2string(pentomino);\n        }\n        return solutionString;\n    }\n\n    pentomino2string(pentomino) {\n        let parts = [];\n        if (pentomino) {\n            parts.push('#' + pentomino.name);\n            parts.push(pentomino.face);\n            parts.push(pentomino.position.x);\n            parts.push(pentomino.position.y);\n            return parts.join('_');\n        }\n    }\n\n}","let boardType = '';\nlet boardWidth;\nlet boardHeight;\nlet rotatedBoard = false;\nlet fields = [];\nlet pentominos = [];\nlet offBoardPentominos = [];\nlet startPositionsXblock = {\n    'square': [\n        [1, 0],\n        [1, 1],\n        [2, 0],\n        [2, 1],\n        [2, 2]\n    ],\n    'rectangle': [\n        [1, 0],\n        [0, 1],\n        [1, 1],\n        [0, 2],\n        [1, 2],\n        [0, 3],\n        [1, 3]\n    ],\n    'dozen': [\n        [1, 0],\n        [2, 0],\n        [3, 0],\n        [4, 0],\n        [0, 1],\n        [1, 1],\n        [2, 1],\n        [3, 1],\n        [4, 1]\n    ],\n    'beam': [\n        [1, 0],\n        [2, 0],\n        [3, 0],\n        [4, 0],\n        [5, 0],\n        [6, 0]\n    ],\n    'stick': [\n        [1, 0],\n        [2, 0],\n        [3, 0],\n        [4, 0],\n        [5, 0],\n        [6, 0]\n    ],\n    'twig': [\n        [1, 0],\n        [6, 0]\n    ]\n};\nlet xPentomino = () => getPentomino('x');\nlet startPosXBlock = 0;\nlet positionsTried = 0;\nlet proceed = true;\n\nlet adjustDimensions = function (pentomino) {\n    if (pentomino && pentomino.initialDimensions) {\n        pentomino.dimensions = pentomino.initialDimensions.slice();\n    }\n    if (pentomino && pentomino.face % 2 === 1) {\n        pentomino.dimensions.reverse();\n    }\n};\n\nlet autoSolve = function () {\n    if (allOffBoard()) {\n        // put the x on board\n        setOnboard(xPentomino(), false);\n        let xPosition = getXBlockPosition();\n        while (xPosition) {  //for all x positions\n            movePentomino(xPentomino(), 0, xPosition, false);\n            sendFeedBack('draw');\n            positionsTried++;\n            findNextFit(offBoardPentominos.slice());\n            xPosition = getXBlockPosition();\n        }\n    } else {\n        findNextFit(offBoardPentominos.slice());\n    }\n};\n\nlet allOffBoard = function () {\n    let emptyBoard = pentominos.length === 0;\n    return emptyBoard;\n};\n\nlet copyBoardFields = function () {\n    let flds = [];\n    for (let y = 0; y < boardHeight; y++) {\n        flds.push([]);\n        for (let x = 0; x < boardWidth; x++) {\n            flds[y].push(fields[y][x]);\n        }\n    }\n    return flds;\n};\n\nlet discard = function (misFits) {\n    let pentomino = pentominos.pop();\n    pentomino.onBoard = false;\n    misFits.push(pentomino);\n    registerPiece(pentomino, -1);\n};\n\nlet findFirstEmptyPosition = function () {\n    // #todo Traverse arrays without for loop\n    let firstAxis = Math.max(boardHeight, boardWidth);\n    let secondAxis = Math.min(boardHeight, boardWidth);\n\n    for (let i = 0; i < firstAxis; i++) {\n        for (let j = 0; j < secondAxis; j++) {\n            if (rotatedBoard) {\n                if (fields[j][i] === 0) return [i, j];\n            } else {\n                if (fields[i][j] === 0) return [j, i];\n            }\n        }\n    }\n    return false;\n};\n\nlet findFirstPartRight = function (pentomino) {\n    let offsetRight = pentomino.dimensions[0];\n    let face = pentomino.faces[pentomino.face];\n    for (let j = 0; j < face.length; j++) {\n        let part = face[j];\n        offsetRight = ((part[1] === 0) && (part[0] < offsetRight)) ? part[0] : offsetRight;\n    }\n    return offsetRight;\n};\n\nlet findFirstPartDown = function (pentomino) {\n    let offsetDown = pentomino.dimensions[1];\n    let face = pentomino.faces[pentomino.face];\n    for (let j = 0; j < face.length; j++) {\n        let part = face[j];\n        offsetDown = ((part[0] === 0) && (part[1] < offsetDown)) ? part[1] : offsetDown;\n    }\n    return offsetDown;\n};\n\nlet findNextFit = function (offBoards) {\n    let misFits = [];\n    const firstEmptyPosition = findFirstEmptyPosition();\n    if (firstEmptyPosition) { // start trying other pentominos\n        if (holeFitsXPieces(firstEmptyPosition)) {\n            while (offBoards.length) {\n                const pentomino = nextOnboard(offBoards);\n                if (pentomino) {\n                    const count = pentomino.faces.length;\n                    for (let face = 0; face < count; face++) {\n                        positionsTried++;\n                        movePentomino(pentomino, face, firstEmptyPosition, true);\n                        if (isFitting() && proceed) {\n                            // sendFeedBack('draw');\n                            findNextFit(sortPentominos(misFits.concat(offBoards)));\n                        }\n                    }\n                    discard(misFits);\n                    // sendFeedBack('draw');\n                } // else next pentomino\n            }\n        }\n    } else {\n        sendFeedBack('solution');\n    }\n};\n\nlet findPentominoByName = function (set, name) {\n    return set.find((pento) => { return pento.name === name; });\n};\n\nlet getPentomino = function (name) {\n    let pentomino = findPentominoByName(pentominos.concat(offBoardPentominos), name);\n    return pentomino;\n};\n\nlet getXBlockPosition = function () {\n    if (startPosXBlock < startPositionsXblock[boardType].length) {\n        let position = startPositionsXblock[boardType][startPosXBlock].slice();\n        startPosXBlock += 1;\n        return position;\n    } else {\n        return false;\n    }\n};\n\n// find out if open region at x,y is large enough for a pentomino by recursion counting\n// xy has to be the most up left open spot\nlet holeFitsXPieces = function (xy) {\n    let holeSize = 0;\n    let oPentoOnboard = oPentominoOnboard();\n    let label = 'a';\n    let board = copyBoardFields();\n    let y = xy[1];\n\n    let countDown = (xy) => {\n        let y = xy[1];\n        const x = xy[0];\n        while ((y < boardHeight) && (board[y][x] === 0)) {\n            board[y][x] = label;\n            holeSize++;\n            // console.table(board);\n            countLeft([x - 1, y]);\n            countRight([x + 1, y]);\n            y++;\n        }\n    };\n\n    let countUp = (xy) => {\n        let y = xy[1];\n        const x = xy[0];\n        while ((y >= 0) && (board[y][x] === 0)) {\n            board[y][x] = label;\n            holeSize++;\n            // console.table(board);\n            countRight([x + 1, y]);\n            countLeft([x - 1, y]);\n            y--;\n        }\n    };\n\n    let countRight = (xy) => {\n        let x = xy[0];\n        const y = xy[1];\n        while ((x < boardWidth) && (board[y][x] === 0)) {\n            board[y][x] = label;\n            holeSize++;\n            // console.table(board);\n            countDown([x, y + 1]);\n            countUp([x, y - 1]);\n            x++;\n        }\n    };\n\n    let countLeft = (xy) => {\n        let x = xy[0];\n        const y = xy[1];\n        while ((x >= 0) && (board[y][x] === 0)) {\n            board[y][x] = label;\n            holeSize++;\n            // console.table(board);\n            countDown([x, y + 1]);\n            countUp([x, y - 1]);\n            x--;\n        }\n    };\n\n    countRight(xy);\n    return holeFits(holeSize);\n};\n\nlet boardHas60Squares = function () {\n    return !(boardType === 'square' || boardType === 'stick');\n};\n\nlet holeFits = function (sum) {\n    let compensation = (oPentominoOnboard() || boardHas60Squares()) ? 0 : 4;\n    return ((sum - compensation) % 5 === 0);\n};\n\nlet initVariables = function (data) {\n    boardType = data.boardType;\n    boardWidth = data.boardWidth;\n    boardHeight = data.boardHeight;\n    rotatedBoard = boardHeight < boardWidth;\n    fields = data.fields;\n    pentominos = data.onBoards;\n    offBoardPentominos = data.offBoards;\n};\n\n// Return true if no overlapping pieces and all pieces are completely on the board\nlet isFitting = function () {\n    let sum = 0;\n    const h = fields.length;\n    for (let y = 0; y < h; y++) {\n        const w = fields[y].length;\n        for (let x = 0; x < w; x++) {\n            if (fields[y][x] > 1) {\n                return false;\n            } else {\n                sum += fields[y][x];\n            }\n        }\n    }\n    return noneStickingOut(sum);\n};\n\nlet logBoard = function () {\n    let flds = setBoardFields('');\n    const blockCount = pentominos.length;\n    for (let i = 0; i < blockCount; i++) {\n        const pentomino = pentominos[i];\n        const face = pentomino.faces[pentomino.face];\n        const partCount = face.length;\n        for (let j = 0; j < partCount; j++) {\n            const x = face[j][0] + pentomino.position.x;\n            const y = face[j][1] + pentomino.position.y;\n            if (y < boardHeight && x < boardWidth) {\n                flds[y][x] += pentomino.name;\n            }\n        }\n    }\n    console.clear();\n    console.table(flds);\n};\n\nlet movePentomino = function (pentomino, face, position, shiftIt) {\n    let newPosition;\n    registerPiece(pentomino, -1);\n    setFace(pentomino, face);\n    // If left top of pentomino is empty ___|\n    // move pentomino to the left or up in case of oblong board \n    if (rotatedBoard) {\n        if (shiftIt && position[1] > 0) {\n            let yShift = findFirstPartDown(pentomino);\n            newPosition = [position[0], position[1] - yShift];\n        } else {\n            newPosition = position;\n        }\n    } else {\n        if (shiftIt && position[0] > 0) {\n            let xShift = findFirstPartRight(pentomino);\n            newPosition = [position[0] - xShift, position[1]];\n        } else {\n            newPosition = position;\n        }\n    }\n    setPosition(pentomino, newPosition);\n    registerPiece(pentomino, 1);\n};\n\nlet nextOnboard = function (offBoards) {\n    let pentomino = offBoards.shift();\n    pentomino.onBoard = true;\n    pentominos.push(pentomino);\n    registerPiece(pentomino, 1);\n    return pentomino;\n};\n\nlet noneStickingOut = function (sum) {\n    let compensation = oPentominoOnboard() ? 4 : 0;\n    return ((sum - compensation) % 5 === 0);\n};\n\nlet onBoard = function (x, y) {\n    return (x >= 0) && (x < boardWidth) && (y >= 0) && (y < boardHeight);\n};\n\nlet oPentominoOnboard = function () {\n    return pentominos.filter((pento) => {\n        return pento.name === 'o';\n    }).length > 0;\n};\n\nlet registerPiece = function (pentomino, onOff) {\n    if (pentomino) {\n        let onBoardParts = 0;\n        const face = pentomino.faces[pentomino.face];\n        const partsCount = face.length;\n        for (let i = 0; i < partsCount; i++) {\n            const part = face[i];\n            const x = part[0] + pentomino.position.x;\n            const y = part[1] + pentomino.position.y;\n            if (onBoard(x, y)) {\n                fields[y][x] += onOff;\n                onBoardParts += 1;\n            }\n            pentomino.onBoard = (onBoardParts == partsCount);\n        }\n    }\n};\n\nlet sendFeedBack = function (message) {\n    // logBoard();\n    let workerData = {\n        message: message || 'solution',\n        positions: positionsTried,\n        onBoards: []\n    };\n    switch (message) {\n        case 'draw':\n            workerData.onBoards = pentominos;\n            break;\n        case 'solution':\n            workerData.onBoards = pentominos;\n            break;\n        case 'finish':\n            workerData.onBoards = pentominos.concat(offBoardPentominos);\n            postMessage(workerData);\n            close();\n        default:\n            close();\n            break;\n    }\n    postMessage(workerData);\n};\n\nlet setFace = function (pentomino, face) {\n    pentomino.face = face;\n    adjustDimensions(pentomino);\n};\n\nlet setPosition = function (pentomino, position) {\n    pentomino.position.x = position[0];\n    pentomino.position.y = position[1];\n};\n\nlet setBoardFields = function (content) {\n    let w = boardWidth;\n    let h = boardHeight;\n    let fields = [];\n    for (let y = 0; y < h; y++) {\n        fields.push([]);\n        for (let x = 0; x < w; x++) {\n            fields[y].push(content);\n        }\n    }\n    return fields;\n};\n\nlet setOnboard = function (pentomino) {\n    pentominos.push(pentomino);\n    let index = offBoardPentominos.indexOf(pentomino);\n    offBoardPentominos.splice(index, 1);\n};\n\nlet sortPentominos = function (pentos) {\n    pentos.sort((a, b) => {\n        return a.index - b.index;\n    });\n    return pentos;\n};\n\nonmessage = function (e) {\n    positionsTried = 0;\n    let message = e.data.message;\n    switch (message) {\n        case 'solve':\n            proceed = true;\n            initVariables(e.data);\n            autoSolve();\n            break;\n        case 'stop':\n            proceed = false;\n            break;\n        default:\n            break;\n    }\n    sendFeedBack('finish');\n};\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { BoardService } from 'services/board-service';\n\n@inject(BoardService)\n\nexport class BoardCustomElement {\n\n    constructor(boardService) {\n        this.bs = boardService;\n    }\n\n    getBoardSizeCSS(shape) {\n        let boardType = this.bs.boardTypes[shape];\n        let css = {\n            width: boardType.w * this.bs.partSize + 'px',\n            height: boardType.h * this.bs.partSize + 'px'\n        };\n        return css;\n    }\n\n    getBoardClasses(newSolution) {\n        let classes = ['board'];\n        let solvedClass = (newSolution) ? 'solved' : '';\n        classes.push(solvedClass);\n        return classes.join(' ');\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport { BindingSignaler } from 'aurelia-templating-resources';\nimport { BoardService } from 'services/board-service';\nimport { SettingService } from 'services/setting-service';\nimport { PentominoService } from 'services/pentomino-service';\nimport { SolutionService } from 'services/solution-service';\n\n@inject(BindingSignaler, BoardService, EventAggregator, SettingService, PentominoService, SolutionService)\n\nexport class ControlsCustomElement {\n\n    constructor(bindingSignaler, boardService, eventAggregator, settingService, pentominoService, solutionService) {\n        this.ea = eventAggregator;\n        this.bnds = bindingSignaler;\n        this.bs = boardService;\n        this.ss = settingService;\n        this.ps = pentominoService;\n        this.sls = solutionService;\n        this.disabledButtons = false;\n        this.setSubscribers();\n    }\n\n    get solutionCount() {\n        return this.sls.solutions[this.bs.boardType].length;\n    }\n\n    getIndicatorClass() {\n        let classes = ['indicator', 'rounded'];\n        let solvedClass = (this.bs.solved && !this.bs.newSolution) ? 'solved' : '';\n        classes.push(solvedClass);\n        return classes.join(' ');\n    }\n\n    get indicatorText() {\n        let currentSolution = this.sls.currentSolution;\n        let solutionCount = '(' + this.sls.solutions[this.bs.boardType].length + ') ';\n        let possibleSolutionsCount = this.sls.getPossibleSolutionsCount();\n        let possible = (possibleSolutionsCount > 0) ? possibleSolutionsCount + ' ' : '0 ';\n        // console.log('possible solutions: ', possibleSolutionsCount);\n        let current = (currentSolution >= 0) ? 'Solution&nbsp;&nbsp;' + (currentSolution + 1) + ' / ' : 'Solutions: ';\n        let text = current + possible + solutionCount;\n        return text;\n    }\n\n    showSolution() {\n        let pentominos = this.ps.pentominos;\n        let solutionString = this.sls.solutions[this.bs.boardType][this.sls.currentSolution];\n        let splitString = solutionString.substr(1).split('#');\n        for (let i = 0; i < splitString.length; i++) {\n            let pentomino = this.ps.pentominos[i];\n            let props = splitString[i].split('_');\n            pentomino.face = parseInt(props[1], 10);\n            pentomino.position.x = parseInt(props[2], 10);\n            pentomino.position.y = parseInt(props[3], 10);\n        }\n        this.bnds.signal('position-signal');\n        this.ps.registerPieces();\n        this.bs.unsetNewSolution();\n    }\n\n    disableNextButton(current, count) {\n        return (current + 1 == count) || this.disabledButtons;\n    }\n\n    disablePreviousButton(current) {\n        return (current == 0) || this.disabledButtons;\n    }\n\n    showFirstSolution() {\n        this.sls.currentSolution = 0;\n        this.showSolution();\n    }\n\n    showLastSolution() {\n        this.sls.currentSolution = this.solutionCount - 1;\n        this.showSolution();\n    }\n\n    showPreviousSolution() {\n        if (this.sls.currentSolution > 0) {\n            this.sls.currentSolution--;\n            this.showSolution();\n        }\n    }\n\n    showNextSolution() {\n        if (!this.disableNextButton(this.sls.currentSolution, this.sls.solutions[this.bs.boardType].length)) {\n            this.sls.currentSolution++;\n            this.showSolution();\n        }\n    }\n\n    setSubscribers() {\n        let direction = 0;\n        let newDirection = 0;\n        let directions = {\n            'ArrowRight': 0,\n            'ArrowDown': 1,\n            'ArrowLeft': 2,\n            'ArrowUp': 3\n        };\n        this.ea.subscribe('solving', response => {\n            this.disabledButtons = response;\n        });\n        this.ea.subscribe('move', response => {\n            if (response == 1) {\n                setTimeout(() => { this.sls.setPossibleSolutions(this.ps.onBoards); });\n            }\n        });\n        this.ea.subscribe('keyPressed', response => {\n            if (!this.disabledButtons) {\n                switch (response) {\n                    case 'ArrowRight': this.showNextSolution();\n                        break;\n                    case 'ArrowLeft': this.showPreviousSolution();\n                        break;\n                    case 'ArrowDown': this.showFirstSolution();\n                        break;\n                    case 'ArrowUp': this.showLastSolution();\n                        break;\n                    case ' ': this.ea.publish('pause');\n                        break;\n                }\n\n\n            }\n        });\n    }\n\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { BoardService } from 'services/board-service';\nimport { EventAggregator } from 'aurelia-event-aggregator';\n\n@inject(BoardService, EventAggregator)\nexport class HeaderCustomElement {\n\n    constructor(boardService, eventAggregator) {\n        this.bs = boardService;\n        this.ea = eventAggregator;\n        this.title = 'Pentomino';\n        this.moves = 0;\n        this.ea.subscribe('move', (result) => {\n            (result > 0) ? this.moves++ : this.moves = 0;\n        });\n    }\n\n    getHeaderSizeCss(shape) {\n        let boardType = this.bs.boardTypes[shape];\n        let css = {\n            width: boardType.w * this.bs.partSize + 'px',\n        }\n        return css;\n    }\n\n    resetMoves() {\n        this.ea.publish('move', 0);\n    }\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { BindingSignaler } from 'aurelia-templating-resources';\nimport { BoardService } from 'services/board-service';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { SolutionService } from 'services/solution-service';\nimport { PentominoService } from 'services/pentomino-service';\nimport { PermutationService } from 'services/permutation-service';\nimport { SettingService } from 'services/setting-service';\n\n@inject(BindingSignaler, BoardService, EventAggregator, SolutionService, PentominoService, PermutationService, SettingService)\n\nexport class MenuCustomElement {\n\n    constructor(bindingSignaler, boardService, eventAggregator, solutionService, pentominoService, permutationService, settingService) {\n        this.bnds = bindingSignaler;\n        this.bs = boardService;\n        this.ea = eventAggregator;\n        this.sls = solutionService;\n        this.ps = pentominoService;\n        this.prms = permutationService;\n        this.ss = settingService;\n        this.boardTypes = Object.keys(this.bs.boardTypes);\n        this.settings = {\n            menuVisible: false,\n            menuDisabled: false,\n            submenuBoardsVisible: false,\n        };\n        this.ea.subscribe('solving', response => {\n            this.settings.menuDisabled = response;\n        });\n    }\n\n    get disableBoardSwitch() {\n        return (this.sls.solutions['square'].length < 2);\n    }\n\n    get menuDisabled() {\n        return this.settings.menuDisabled;\n    }\n\n    get solverDisabled() {\n        return (this.sls.solutions['square'].length < 2) || !this.workersSupported();\n    }\n\n    rotateBoard() {\n        this.prms.rotateBoard(this.ps.pentominos);\n        this.ps.registerPieces();\n        this.settings.menuVisible = false;\n        this.bnds.signal('position-signal');\n    }\n\n    flipBoardYAxis() {\n        this.prms.flipBoardYAxis(this.ps.pentominos);\n        this.ps.registerPieces();\n        this.settings.menuVisible = false;\n        this.bnds.signal('position-signal');\n    }\n\n    showTheMenu() {\n        this.settings.menuVisible = true;\n        this.settings.submenuBoardsVisible = false;\n    }\n\n    mixBoard() {\n        this.prms.mixBoard(this.ps.pentominos);\n        this.ps.registerPieces();\n        this.settings.menuVisible = false;\n        this.bnds.signal('position-signal');\n        this.ea.publish('move', 0);\n    }\n\n    hideTheMenu() {\n        this.settings.menuVisible = false;\n    }\n\n    showThisBoard(key) {\n        let threshold = 3;\n        if (this.sls.solutions) {\n            switch (key) {\n                case 'square':\n                    return true;\n                case 'rectangle':\n                    return this.sls.solutions['square'].length > threshold;\n                case 'beam':\n                    return this.sls.solutions['rectangle'].length > threshold;\n                case 'stick':\n                    return this.sls.solutions['beam'].length > threshold;\n                case 'twig':\n                    return this.sls.solutions['stick'].length > threshold;\n                default:\n                    return false;\n            }\n        }\n        return true;\n    }\n\n    toggleSubmenuBoards() {\n        this.settings.submenuBoardsVisible = !this.settings.submenuBoardsVisible;\n        return false;\n    }\n\n    getBoardDimensions(boardType) {\n        let text = ('' + this.bs.boardTypes[boardType].w + '&nbsp;&times;&nbsp;' + this.bs.boardTypes[boardType].h);\n        return text;\n    }\n\n    getActiveBoardClass(boardType) {\n        return (this.bs.boardType == boardType) ? 'active' : '';\n    }\n\n    screenIsLargeEnough() {\n        let clw = document.querySelectorAll('html')[0].clientWidth;\n        let clh = document.querySelectorAll('html')[0].clientHeight;\n        return clw + clh > 1100;\n    }\n\n    setStartPosition(shape) {\n        this.ea.publish('showSolvingPanel', false);\n        this.ea.publish('move', 0);\n        this.bs.setBoardType(shape);\n        this.ps.getStartPosition();\n        this.ps.registerPieces();\n        this.bs.unsetSolved();\n        this.bs.unsetNewSolution();\n        this.settings.submenuBoardsVisible = false;\n        this.settings.menuVisible = false;\n    }\n\n    workersSupported() {\n        if (window.Worker) {\n            return true;\n        }\n        return false;\n    }\n\n    showSolvingPanel() {\n        this.ea.publish('showSolvingPanel', true);\n        this.settings.menuVisible = false;\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { PentominoService } from 'services/pentomino-service';\nimport { SettingService } from 'services/setting-service';\nimport { DragService } from 'services/drag-service';\n\n@inject(PentominoService, SettingService, DragService)\nexport class PentominosCustomElement {\n\n    constructor(pentominoService, settingService, dragService) {\n        this.ps = pentominoService;\n        this.ss = settingService;\n        this.ds = dragService;\n    }\n\n    getPentominoClasses(pentomino) {\n        let classes = ['pentomino'];\n        classes.push('pentomino block_' + pentomino.name);\n        if (pentomino.active) {\n            classes.push('active');\n        }\n        return classes.join(' ');\n    }\n\n    getPartClasses(pentomino, partIndex, face) {\n        let classes = ['fa', 'part'];\n        // C and T blocks don't need mirrorring around symmetric axis\n        let flipH = !(\n            pentomino.index == 1 && pentomino.face % 2 == 0 ||\n            pentomino.index == 6 && pentomino.face % 2 == 0\n        );\n        let flipV = !(\n            pentomino.index === 1 && pentomino.face % 2 === 1 ||\n            pentomino.index === 6 && pentomino.face % 2 === 1\n        );\n        if (partIndex === 0 && pentomino.type < 5) {\n            classes.push('fa-refresh');\n            classes.push('rotate');\n        }\n        if (partIndex === 1 && pentomino.type < 4 && flipH) {\n            classes.push('fa-arrows-h');\n            classes.push('flipH');\n        }\n        if (partIndex === 2 && pentomino.type < 4 && flipV) {\n            classes.push('fa-arrows-v');\n            classes.push('flipV');\n        }\n        return classes.join(' ');\n    }\n\n    getPentominoCSS(x, y, color) {\n        let css = {\n            left: x * this.ss.partSize + 'px',\n            top: y * this.ss.partSize + 'px',\n            backgroundColor: color\n        };\n        return css;\n    }\n\n    getPartCSS(part) {\n        let css = {\n            'left': part[0] * this.ss.partSize + 'px',\n            'top': part[1] * this.ss.partSize + 'px'\n        };\n        return css;\n    }\n\n    attached() {\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport { BindingSignaler } from 'aurelia-templating-resources';\nimport { BoardService } from 'services/board-service';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { PentominoService } from 'services/pentomino-service';\nimport { PermutationService } from 'services/permutation-service';\nimport { SolutionService } from 'services/solution-service';\n\n@inject(BindingSignaler, BoardService, EventAggregator, PentominoService, PermutationService, SolutionService)\nexport class SolvingCustomElement {\n\n    constructor(bindingSignaler, boardService, eventAggregator, pentominoService, permutationService, solutionService) {\n        this.ea = eventAggregator;\n        this.bnds = bindingSignaler;\n        this.bs = boardService;\n        this.ps = pentominoService;\n        this.sls = solutionService;\n        this.prms = permutationService;\n        this.solvingPanelVisible = false;\n        this.slvrWrkr = null;\n        this.canStop = false;\n        this.positionsTried = 0;\n        this.ea.subscribe('showSolvingPanel', response => {\n            this.solvingPanelVisible = response;\n            if (!response) {\n                this.stop();\n            }\n        });\n        this.solutionsBuffer = [];\n        this.backupPentominos = this.ps.pentominos.slice();\n        this.alert = '';\n    }\n\n    get solutionsInQueue() {\n        return this.solutionsBuffer.length;\n    }\n\n    get noSolutions() {\n        return this.sls.solutions[this.bs.boardType].length === 0;\n    }\n\n    get noSpaceForSolving() {\n\n    }\n\n    get message() {\n        if (this.alert.length) {\n            return this.alert;\n        } else {\n            return false;\n        }\n    }\n\n    autoSolve() {\n        this.backupPentominos = this.ps.pentominos.slice();\n        this.slvrWrkr = new Worker('./src/services/solver-worker.js');\n        this.canStop = true;\n        this.boardWidth = this.bs.getWidth();\n        this.boardHeight = this.bs.getHeight();\n        this.startPosXBlock = 0;\n        this.positionsTried = 0;\n        this.solutionsBuffer = [];\n        let workerData = {\n            message: 'solve',\n            boardType: this.bs.boardType,\n            boardWidth: this.bs.getWidth(),\n            boardHeight: this.bs.getHeight(),\n            fields: this.ps.getFields(),\n            onBoards: this.ps.onBoards,\n            offBoards: this.ps.offBoards\n        };\n\n        this.ea.publish('solving', true);\n        this.slvrWrkr.postMessage(workerData);\n        this.handleSolutions();\n\n        this.slvrWrkr.onmessage = (e) => {\n            let pentominos = this.ps.sortPentominos(e.data.onBoards);\n            let offBoards = e.data.offBoards;\n            let message = e.data.message;\n            this.positionsTried = e.data.positions;\n            switch (message) {\n                case 'draw':\n                    this.ps.setPentominos(pentominos);\n                    this.alert = '';\n                    break;\n                case 'solution':\n                    this.alert = '';\n                    setTimeout(() => { this.bufferSolution(pentominos) });\n                    break;\n                case 'finish':\n                    this.alert = 'No more solutions found!';\n                    this.canStop = false;\n                    this.ea.publish('solving', false);\n                    break;\n                case 'noSolution':\n                    this.alert = 'No solutions found';\n                default:\n                    break;\n            }\n        };\n    }\n\n    bufferSolution(solution) {\n        this.solutionsBuffer.push(solution);\n    }\n\n    close() {\n        this.ea.publish('showSolvingPanel', false);\n    }\n\n    delete() {\n        this.stageBuffer = [];\n        this.sls.deleteSolutions();\n        this.ps.setPentominos(this.backupPentominos);\n        this.ps.registerPieces();\n    }\n\n    handleSolutions() {\n        let self = this;\n        // Are there any solutions to \n        if (this.solutionsInQueue) {\n            let pentominos = self.solutionsBuffer.shift();\n            self.ps.setPentominos(pentominos);\n            self.bs.setSolved();\n            self.sls.saveSolution(pentominos);\n        }\n        if (self.canStop || self.solutionsBuffer.length) {\n            requestAnimationFrame(() => { self.handleSolutions() });\n        } else {\n            self.sls.saveSolution();\n        }\n    }\n\n    mixBoard() {\n        this.prms.mixBoard(this.ps.pentominos);\n        this.ps.registerPieces();\n        this.bnds.signal('position-signal');\n    }\n\n    stop() {\n        this.canStop = false;\n        this.ea.publish('solving', false);\n        if (this.slvrWrkr) {\n            this.slvrWrkr.terminate();\n            this.ps.setPentominos(this.backupPentominos);\n            this.ps.registerPieces();\n        }\n    }\n\n}\n","export class PartPosValueConverter {\n    toView(css, config) {\n        css = {\n            left: config.x * config.partSize + 'px',\n            top: config.y * config.partSize + 'px'\n        };\n        return css;\n    }\n}","export class PentoFaceValueConverter {\n    toView(array, config) {\n        array = config.faces[config.face];\n        return array;\n    }\n}","export class PentoPosValueConverter {\n    toView(css, config) {\n        css = {\n            left: config.x * config.partSize + 'px',\n            top: config.y * config.partSize + 'px',\n            backgroundColor: config.color\n        };\n        return css;\n    }\n}","export class ThousandsValueConverter {\n    toView(number) {\n        return number.toLocaleString('nl');\n    }\n}"],"sourceRoot":"../src"}